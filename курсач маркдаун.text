            Министерство образования и науки РФ

Федеральное государственное автономное образовательное учреждение
высшего профессионального образования

КАЗАНСКИЙ ФЕДЕРАЛЬНЫЙ (ПРИВОЛЖСКИЙ) УНИВЕРСИТЕТ

ИНСТИТУТ ВЫЧИСЛИТЕЛЬНОЙ МАТЕМАТИКИ И ИНФОРМАЦИОННЫХ ТЕХНОЛОГИЙ

Кафедра технологии программирования

КУРСОВАЯ РАБОТА

на тему:

**Использование методик и подходов коллективной разработки в нетехнических
специальностях и отраслях**

**Работу выполнила:**

студент гр. 09-108

"\_\_\_"\_\_\_\_\_\_\_\_\_ 2014 г. \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ (Кадирова
А.М.)

**Работу проверила:**

ассистент кафедры КТК

"\_\_\_"\_\_\_\_\_\_\_\_\_ 2014 г. \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ (Туйкин А.М.)

**Казань, 2014**

 

**Содержание**
--------------

Введение………………………………………………………………………….................3

Глава I. Основы Git………………………………………………...............................5

§1.1.Git терминология……………………………………………………….................5

§1.2 Управление версиями…………………………………………………...............5

§1.3Локальные системы управления версиями………………………….........6

§1.4 Централизованные системы управления версиями…………………....7

§1.5 Распределённые системы контроля версий……………………………....9

§1.6 Краткая история Git……………………………………………………................10

§1.7 Слепки вместо патчей………………………………………………...................11

§1.8 Почти все операции — локальные……………………………………...........12

§1.9 Git следит за целостностью данных…………………………………….........13

§1.10 Чаще всего данные в Git только добавляются………………………......14

§1.11 Три состояния…………………………………………………………..................14

Глава II. Основы Google Docs………………………………………………………......17

§2.1 Что такое облачное хранение
данных?..............................................17

§2.2 Что такое Google
docs?.........................................................................17

§2.3 Краткая история Google docs………………………………………..................18

§2.4 Writely…………………………………………………………………….....................19

Глава III. Git или Google
docs?....................................................................20

§3.1 Работа без доступа в интернет……………………………………...................20

§3.2 Сохранение изменений…………………………………………….....................21

§3.3 С какими типами файлов работают
системы?...................................22

Глава IV. Форматирование и вёрстка текста в системах

            LaTEX и
            Markdown................................................................…..24

§5.1 LaTEX…………………………………………………………………….......................24

§5.2 Markdown…………………………………………………………….........................27

Заключение……………………………………………………………………………............29

Использованная литература…………………………………………………………......30

Использованные источники…………………………………………………………......31

 

**Введение.**
-------------

На сегодняшний день информационные технологии очень тесно переплелись и
продолжают переплетаться с нашей повседневной жизнью. При этом, есть некоторые
инструменты, которые созданы и используются сугубо программистами. Хотя методики
и подходы могут быть эффективно использованы и людьми, не имеющими прямого
отношения к процессу разработки. 

Одной из такой сфер является командная работа.  
Актуальность темы обусловлена тем, что современные реалии демонстрируют, что
вопрос организации процесса в командах остро стоит не только в командах,
занимающихся программной разработкой. Один из вопросов - как организовать
процесс распределенных команд. Исходя из того, что в командах разработки есть
положительный опыт в организации такого процесса, возникает идея переноса
наработанных подходов в другие сферы. 

Объектом исследования данной работы являются системы версионного контроля.

Предметом исследования являются методологии и подходы в процессе командной
разработки.

Цель исследования состоит в попытке провести аналогии между процессами,
положительно зарекомендовавшими себя в командной разработки ПО и переноса их в
контекст другой предметной области.  
Для достижения указанной цели в курсовой работе решаются следующие
исследовательские задачи:

-   Исследовать процессы взаимодействия и инструменты на примере такой задачи,
    как создание совместной издательской работы (книги, результаты исследований,
    методологические пособия).

-   Исследовать процесс и инструменты работы в команде на примере системы
    контроля версий git.

-   Провести аналогии и попробовать перенести подходы, используемые в git на
    другую предметную область.

-   Выявить плюсы и минусы. Предложить решения.

**Глава I. Основы Git**
-----------------------

### **§1.1.Git терминология**

Git (произн. «гит») — распределённая система управления версиями файлов. Проект
был создан Линусом Торвальдсом для управления разработкой ядра Linux, первая
версия выпущена 7 апреля 2005 года. На сегодняшний день поддерживается Джунио
Хамано.

GitHub — самый крупный веб-сервис для хостинга IT-проектов и их совместной
разработки. Основан на системе контроля версий Git и разработан на Ruby on Rails
и Erlang компанией GitHub, Inc.

Система контроля версий (СКВ) — это система, регистрирующая изменения в одном
или нескольких файлах с тем, чтобы в дальнейшем была возможность вернуться к
определённым старым версиям этих файлов.

Репозиторий — место, где хранятся и поддерживаются какие-либо данные. Чаще всего
данные в репозитории хранятся в виде файлов, доступных для дальнейшего
распространения по сети.

Патч - файл, описывающий различие между файлами.

Коммит - сохранение, фиксация (в архиве, репозитарии и др.) изменений в
программном коде. 

### **§1.2 Управление версиями**

Что такое система управлениями версиями (СУВ), и зачем оно нужно? Как было
сказано выше, система управления версиями (или система контроля версий) – это
система, сохраняющая изменения в одном или нескольких файлах так, чтобы

потом можно было восстановить определённые старые версии. Для примеров я буду
использовать исходные коды программ, но на самом деле можно управлять версиями
практически любых типов файлов.

Если рассматривать СКВ на примере графических или веб-дизайнеров и есть
необходимость хранения каждой версии изображения – то пользоваться СКВ будет
правильным решением. Так как она позволяет вернуть файлы к прежнему виду,
вернуть к прежнему состоянию весь проект, сравнить изменения с какого-то
времени, увидеть, кто последним изменял модуль, который дал сбой, кто создал
проблему, и так далее. Но главное преимущество в СКВ – это возможность лёгкого
восстановления утерянных файлов. Кроме того, издержки на всё это будут очень
маленькими.

### **§1.3 Локальные системы управления версиями**

Очень распространенная и самая простая система управления версиями – это
копирование файлов в другой каталог и запись текущей даты в название каталога,
но он довольно часто даёт сбои. Довольно легко забыть в каком каталоге ты
находишься, и случайно изменить не тот файл, либо перезаписать файлы не в тот
каталог.

Чтобы решить эту проблему, программисты уже давно разработали локальные СУВ с
простой базой данных, в которой хранятся все изменения нужных файлов (рисунок
1).

![](\<C:/Users/kadirova\_albina/Desktop/Курсовая/картинки/1.png\>)

**Рис.1:***Схема локальной СУВ*

Одной из наиболее популярных СУВ данного типа является rcs, которая до сих пор
устанавливается на многие компьютеры. Даже в современной операционной системе
Mac OS X утилита rcs устанавливается вместе с Developer Tools. Эта утилита
основана на работе с наборами патчей между парами изменений, которые хранятся в
специальном формате на диске. Это позволяет пересоздать любой файл на любой
момент времени, последовательно накладывая патчи.

### **§1.4 Централизованные системы управления версиями**

Ещё одной большой проблемой оказалась необходимость сотрудничать с другими
разработчиками. Чтобы решить её, были созданы централизованные системы
управления версиями (ЦСУВ). В таких системах, например CVS, Subversion и
Perforce, есть центральный сервер, на котором хранятся все отслеживаемые файлы,
и ряд клиентов, которые получают копии файлов из него. Много лет это был
стандарт управления версиями (см. рис. 2).

![](\<C:/Users/kadirova\_albina/Desktop/Курсовая/картинки/2.png\>)

**Рисунок 2:** *Схема централизованного управления версиями.*

Такой подход имеет множество преимуществ, особенно над локальными СУВ. К
примеру, в каждом проекте чётко распределены роли и все знают, кто и чем
занимается. У администраторов есть чёткий контроль над тем, кто и что может
делать, и, конечно, администрировать ЦСУВ гораздо легче, чем локальные базы на
каждом клиенте.

Однако при таком подходе есть и несколько серьёзных недостатков. Наиболее
очевидный — централизованный сервер является уязвимым местом всей системы. Если
сервер выключается на час, то в течение часа разработчики не могут
взаимодействовать, и никто не может сохранить новые версии. Если же повреждается
диск с центральной базой данных и нет резервной копии, то теряется вся
информация, вся история проекта, разве что за исключением нескольких рабочих
версий, сохранившихся на рабочих машинах пользователей. Локальные системы
управления версиями подвержены той же проблеме: если вся история проекта
хранится в одном месте, есть риск потерять всё.

### **§1.5 Распределённые системы контроля версий**

В такой ситуации в игру вступают распределенные системы управления версиями
(РСУВ). В таких системах как Git, Mercurial, Bazaar или Darcs клиенты не просто
забирают последние версии файлов, а полностью копируют репозиторий. Поэтому в
случае, когда «умирает» сервер, через который шла работа, любой клиентский
репозиторий может быть скопирован обратно на сервер, чтобы восстановить базу
данных. Каждый раз, когда клиент забирает свежую версию файлов, создаётся полная
копия всех данных (см. рисунок 3).

![](\<C:/Users/kadirova\_albina/Desktop/Курсовая/картинки/3.png\>)

**Рисунок 3:** *Схема распределенной системы управления версиями*

Кроме того, в большей части этих систем можно работать с несколькими удаленными
репозиториями, таким образом, можно одновременно работать по-разному с разными
группами людей в рамках одного проекта. Так, в одном проекте можно одновременно
вести несколько типов рабочих процессов, что невозможно в централизованных
системах.

### **§1.6 Краткая история Git**

Существует очень большой открытый проект Linux. Бо́льшую часть существования ядра
Linux (1991-2002) изменения вносились в код путем приёма патчей и архивирования
версий. В 2002 году проект перешёл на проприетарную РСУВ Bit-Keeper.

В 2005 году отношения между сообществом разработчиков ядра Linux и компанией,
разрабатывавшей BitKeeper, испортились, и право бесплатного пользования
продуктом было отменено. Это подтолкнуло разработчиков Linux (и в частности
Линуса Торвальдса, создателя Linux) разработать

собственную систему, основываясь на опыте, полученном за время использования
BitKeeper.

Основные требования к новой системе были следующими:

• скорость;

• простота дизайна;

• поддержка нелинейной разработки (тысячи параллельных веток);

• полная распределенность;

• возможность эффективной работы с такими большими проектами как ядро Linux (как
по скорости, так и по размеру данных).

С момента рождения в 2005 г. Git разрабатывали так, чтобы он был простым в
использовании,сохранив свои первоначальные свойства. Он невероятно быстр, очень
эффективен для больших проектов, а также обладает превосходной системой
ветвления для нелинейной разработки.

### **§1.7 Слепки вместо патчей**

Главное отличие Git от любых других СУВ (например, Subversion и ей подобных) —
это то, как Git смотрит на данные. В принципе, большинство других систем хранит
информацию как список изменений (патчей) для файлов. Эти системы (CVS,
Subversion, Perforce, Bazaar и другие) относятся к хранимым данным как к набору
файлов и изменений, сделанных для каждого из этих файлов во времени, как
показано на рисунке 4.

![](\<C:/Users/kadirova\_albina/Desktop/Курсовая/картинки/4.png\>)

**Рисунок 4:** *Другие системы хранят данные как изменения к базовой версии для
каждого файла.*

Git не хранит свои данные в таком виде. Вместо этого Git считает хранимые данные
набором слепков небольшой файловой системы. Каждый раз, когда вы фиксируете
текущую версию проекта, Git сохраняет слепок того, как выглядят все файлы
проекта на текущий момент. Ради эффективности, если файл не менялся, Git не
сохраняет файл снова, а делает ссылку на ранее сохранённый файл. То, как Git
подходит к хранению данных, похоже на рисунок 5.

![](\<C:/Users/kadirova\_albina/Desktop/Курсовая/картинки/5.png\>)

**Рисунок 5:** *Git хранит данные как слепки состояний проекта во времени.*

Это важное отличие Git от практически всех других систем управления версиями.
Из-за него Git вынужден пересмотреть практически все аспекты управления
версиями, которые другие системы взяли от своих предшественниц. Git больше похож
на небольшую файловую систему с невероятно мощными инструментами, работающими
поверх неё, чем на просто СУВ.

### **§1.8 Почти все операции — локальные**

К примеру, чтобы показать историю проекта, Git-у не нужно скачивать её с
сервера, он просто читает её прямо из локального репозитория. Поэтому
возможность увидеть историю практически мгновенна. В случае необходимости
просмотра изменения между текущей версией файла и версией, сделанной месяц
назад, Git может взять файл месячной давности и вычислить разницу на месте,
вместо того чтобы запрашивать разницу у сервера СУВ или качать с него старую
версию файла и делать локальное сравнение.

Для совершения большинства операций в Git необходимы только локальные файлы и
ресурсы, т.е. обычно информация с других компьютеров в сети не нужна. В отличии
от централизованных систем, Git хранит всю историю проекта локально на диске, а
большинство операций выглядят практически мгновенными.

Кроме того, без доступа к локальной сети можно спокойно делать коммиты, а затем
отправить их, как только станет доступна сеть. Во многих других системах это
невозможно или же крайне неудобно. Например, используя Perforce, мало, что можно
сделать без соединения с сервером. Работая с Subversion и CVS, можно
редактировать файлы, но сохранить изменения в базе данных нельзя (потому что она
отключена от репозитория).

### **§1.9 Git следит за целостностью данных**

Перед сохранением любого файла Git вычисляет контрольную сумму, и она становится
индексом этого файла. Поэтому невозможно изменить содержимое файла или каталога
так, чтобы Git не узнал об этом. Эта функциональность встроена в сам фундамент
Git и является важной составляющей его философии. Если информация потеряется при
передаче или повредится на диске, Git всегда это выявит.

Механизм, используемый Git для вычисления контрольных сумм, называется SHA-1
хеш. Это строка из 40 шестнадцатеричных знаков (0-9 и a-f), которая вычисляется
на основе содержимого файла или структуры каталога, хранимого Git. SHA-1 хеш
выглядит примерно так:

24b9da6552252987aa493b52f8696cd6d3b00373

Работая с Git, постоянно будут встречаться эти хеши, поскольку они широко
используются. Фактически, в своей базе данных Git сохраняет всё не по именам
файлов, а по хешам их содержимого.

### **§1.10 Чаще всего данные в Git только добавляются**

Практически все действия, которые вы совершаете в Git, только добавляют данные в
базу. Очень сложно заставить систему удалить данные или сделать что-то
неотменяемое. Можно, как и в любой другой СУВ, потерять данные, которые ещё не
сохранили, но как только они зафиксированы, их очень сложно потерять, особенно
если регулярно отправлять изменения в другой репозиторий. Пользуясь Git’ом можно
экспериментировать, не боясь серьёзно что-то поломать.

### **§1.11 Три состояния**

В Git файлы могут находиться в одном из трёх состояний: зафиксированном,
изменённом и подготовленном. «Зафиксированный» значит, что файл уже сохранён в
локальной базе. К изменённым относятся файлы, которые поменялись, но ещё не были
зафиксированы. Подготовленные файлы — это изменённые файлы, отмеченные для
включения в следующий коммит.

Таким образом, в проекте с использованием Git есть три части: каталог Git (Git
directory), рабочий каталог (working directory) и область подготовленных файлов
(staging area).

Каталог Git — это место, где Git хранит метаданные и базу данных объектов
проекта. Это наиболее важная часть Git, и именно она копируется, когда
клонируется репозиторий с другого компьютера.

Рабочий каталог — это извлечённая из базы копия определённой версии проекта. Эти
файлы достаются из сжатой базы данных в каталоге Git и помещаются на диск для
того, чтобы была возможность их просматривать или редактировать.

Область подготовленных файлов — это обычный файл, обычно хранящийся в каталоге
Git, который содержит информацию о том, что должно войти в следующий коммит.
Иногда его называют индексом (index), но в последнее время становится стандартом
называть его областью подготовленных файлов (staging area). (рис. 6)

![](\<C:/Users/kadirova\_albina/Desktop/Курсовая/картинки/6.png\>)

**Рисунок 6:** *Рабочий каталог, область подготовленных файлов, каталог Git.*

Стандартный рабочий процесс с использованием Git выглядит примерно так:

1. Пользователь меняет файл в рабочем каталоге.

2. Подготавливает файлы, добавляя их слепки в область подготовленных файлов.

3. Делает коммит. При этом слепки из области подготовленных файлов сохраняются в
каталог Git.

Если рабочая версия файла совпадает с версией в каталоге Git, файл считается
зафиксированным. Если файл изменён, но добавлен в область подготовленных данных,
он подготовлен. Если же файл изменился после выгрузки из БД, но не был
подготовлен, то он считается изменённым.

**Глава II. Основы Google Docs**
--------------------------------

### **§2.1 Что такое облачное хранение данных?**

**Облачное хранилище данных** (англ. *cloud storage*) — модель онлайн-хранилища,
в котором данные хранятся на многочисленных распределённых в сети серверах,
предоставляемых в пользование клиентам, в основном, третьей стороной. В отличие
от модели хранения данных на собственных выделенных серверах, приобретаемых или
арендуемых специально для подобных целей, количество или какая-либо внутренняя
структура серверов клиенту, в общем случае, не видна. Данные хранятся и
обрабатываются в так называемом *облаке*, которое представляет собой, с точки
зрения клиента, один большой виртуальный сервер. Физически же такие серверы
могут располагаться удалённо друг от друга географически, вплоть до расположения
на разных континентах.

### **§2.2 Что такое Google docs?**

Документы Google (или Google Docs) представляют собой бесплатный онлайновый
"Офис", который поддерживает табличный и текстовый процессор. Кроме этого, есть
возможность создавать презентации. Еще стандартной функцией этого
интернет-сервиса является "облачное" хранение файлов с возможностью обмена.
Появился ресурс путем слияния Google Spreadsheets с Writely.

Другими словами, речь идет о веб-ориентированной программной разработке. То
есть, разработка функционирует в пределах интернет-браузера. Нет необходимости
инсталлировать сервис на компьютер. Таблицы и документы, которые создает
пользователь, находятся в специализированном хранилище Google. Кроме
этого, доступна возможность экспорта информации в файл. Эта функция является
ключевым преимуществом. Доступ к сохраненным данным можно получить с любой
машины, которая подключена к Интернету. В данном случае доступ будет закрыт с
помощью пароля.

###  **§2.3 Краткая история Google docs**

Google Docs & Spreadsheets основан на двух разных продуктах, Writely и Google
Spreadsheets. Writely являлся отдельным текстовым процессором для веб. Он был
создан компанией Upstartle, и включал такие функции, как совместное
редактирование и контроль доступа. Меню, горячие клавиши и отображаемые диалоги
имитировали те, что пользователи могли видеть в текстовых процессорах,
установленных у них на компьютере, таких как Microsoft Word или OpenOffice.org
Writer. В начале 2006 года Google приобрела Upstartle. Writely продолжал
работать со своей системой пользователей до 19 сентября 2006, пока не был
включён в систему Google Accounts. Writely изначально работал на
технологии Microsoft ASP.NET, которая использует Microsoft Windows. С июля 2006
серверы Writely работают на операционных системах, основанных на
Linux.<http://ru.wikipedia.org/wiki/Google_Docs#cite_note-4> Одновременно с этим
Google разрабатывала Google Spreadsheets. Google анонсировала Spreadsheets 6
июня 2006 года, и сделала его доступным только для ограниченного числа
пользователей, зарегистрировавшихся первыми. Тест версии для ограниченного числа
пользователей был завершён, и она была заменена бета-версией, доступной для всех
владельцев аккаунтов Google Account. В начале 2010 года Google предоставил
возможность хранения и совместного использования любых типов файлов с помощью
сервиса Google Docs. Была добавлена также возможность OCR загружаемых .pdf
документов и картинок, но изначально поддерживались только языки с латинским
алфавитом. Зимой 2011 года была внедрена поддержка ещё 29 языков, в том числе
русского языка.

### **§2.4 Writely**

Текстовый процессор Writely (Document) позволяет редактировать различные
документы - OpenDocument, Word** **и различные электронные таблицы. В его основе
используется технология AJAX. Пользователям открыт доступ и возможность изменять
документы с компьютера, подключенного к Интернету. Также доступно огромное
количество инструментов для форматирования - чтобы изменять габариты, стиль
шрифта, редактировать цвета и декорации. Еще можно создавать списки, таблицы,
вставлять изображения, ссылки и специальные символы.  
Сохранение документов происходит в автоматическом режиме при внесении каких-либо
изменений. Однако каждое редактирование фиксируется. Доступен режим отмены. Эту
функцию можно сравнивать с той, которая используется в стандартном текстовом
редакторе. При необходимости удастся загрузить на сервер и оттуда файлы
различного формата.  
Кроме этого, можно работать с простым текстом, RTF, HTML, файлами Microsoft
Word, OpenDocument, а также форматом PDF и некоторыми графическими шаблонами.
Разработчики заявили о поддержке Word Perfect.

**Глава III. Git как альтернатива Google docs?**
------------------------------------------------

### **§3.1 Работа без доступа в интернет**

Git удобнее тем, что работать с файлами можно вне зависимости от того есть
подключение к локальной сети или нет. Это объясняется структурой работы системой
контроля версий. Дело в том, что СУВ хранят код в репозитории. Репозиторий
является хранилищем, который синхронизирует изменения файлов, загруженных
разными участниками в процессе разработки кода. Но между главным репозиторием и
пользователем существует ещё и промежуточный репозиторий. То есть благодаря
локальному репозиторию нет необходимости в постоянном доступе к интернету для
работы. Как было сказано ранее коммиты можно делать в любое время и работать над
файлом тоже, а затем отправить их как только станет доступна сеть.

В Google docs так же предусмотрена работа в автономном режиме, это возможно
набрав в адресной строке docs.google.com . Когда подключение к Интернету
отсутствует, Google Docs использует информацию, которая хранится на жестком
диске, т.е. при работе в автономном режиме, изменения сохраняются на компьютере.
При подключении к Интернету происходит синхронизация с Google Docs. При работе в
автономном режиме, есть возможность просматривать и редактировать любой
существующий текстовый документ. Но создавать новые документы в автономном
режиме нельзя. Во время работы в автономном режиме изменения так же будут
автоматически сохраняться, как и при работе в сети. Однако для того чтобы эти
изменения были сохранены на сервере, необходимо подключиться к Интеренету и
зайти на Google Docs в том же браузере, в котором изначально проводилась работа
в офф-лайне. После этого автоматически будет произведена синхронизация данных.

### **§3.2 Сохранение изменений**

При работе с Google docs все изменения в документах сохраняются автоматически и
в любой момент времени можно просмотреть изменения, произведенные всеми
пользователями, которым доступен этот документ. Единственная проблема в том, что
сохраняет он их всего на 30 дней. Для того чтобы изменения сохранились на более
долгий промежуток времени следует изменить настройки, что впрочем не является
таким сложным.

В работе с Git’ом сохранить и записать изменения в репозиторий немного сложнее.
Начнём с того, что каждый файл в рабочем каталоге может находиться в одном из
двух состояний: под версионным контролем (отслеживаемые) и нет
(неотслеживаемые). Отслеживаемые файлы — это те файлы, которые были в последнем
слепке состояния проекта (snapshot); они могут быть неизмененными, измененными
или подготовленными к коммиту (staged). Неотслеживаемые файлы — это всё
остальное, любые файлы в вашем рабочем каталоге, которые не входили в последний
слепок состояния и не подготовлены к коммиту. Когда пользователем впервые
клонируется репозиторий, все файлы будут отслеживаемыми и неизмененными, потому
что их только взяли из хранилища (checked them out) и ничего пока не
редактировали. Как только файлы будут отредактированы, Git будет рассматривать
их как измененные, т.к. их изменили с момента последнего коммита. Эти изменения
индексируются (stage) и затем фиксируются все индексированные изменения, а затем
цикл повторяется. Этот жизненный цикл изображен на рисунке 7.

![](\<C:/Users/kadirova\_albina/Desktop/Курсовая/картинки/7.png\>)

**Рисунок 7:** *Жизненный цикл состояния ваших файлов.*

Когда речь идёт о сохранении изменений, я считаю, что работа с Google docs
комфортнее, нежели с Git’ом.

### **§3.3 С какими типами файлов работают системы?**

Что касается Google Docs, то общее количество типов файлов с которыми они
работают, и которые можно будет просмотреть в их веб-интерфейсе с любого
устройства(компьютер, ноутбук, планшет, телефон) составляет более 30. По
сравнению с Git’ом работа здесь легче, так как не приходится загружать и
выгружать по несколько раз один и тот же файл для сохранения изменений.

Git, как и многие системы, работает с разными типами файлов: бинарные файлы,
текстовые, изображения, документы MS Word. Но в отличии от других систем, здесь
это немного сложнее. Для того чтобы поместить документы Word под версионный
контроль, можно закачать их в Git-репозиторий и время от времени делать коммиты.
Но сравнить две версии между собой не получится, только если не выгрузить их обе
и просмотреть вручную. Есть ещё один вариант настроить Git на использование
программы string для конвертирования документов Word в читаемые текстовые файлы,
которые Git затем правильно сравнит. Но даже данная функция не может до конца
корректно работать, так как существуют разные виды .doc файлов. Некоторые из них
могут использовать кодировку UTF-16 или могут быть написаны не в латинице, в
таких файлах strings не найдёт ничего хорошего, и его полезность может сильно
варьироваться. Наиболее удобно работать с текстовыми файлами, но тут возникает
проблема в разметке текста, в форматировании и в вёрстке, в чём Google добился
довольно хороших результатов. В этом случае как альтернативу в написании
«красивого» текста в Google Docs можно рассмотреть Git в совокупности с языками
разметки такими, как LaTEX или Markdown.

**Глава IV. Форматирование и вёрстка текста в языковых разметках LaTEX и Markdown**
-----------------------------------------------------------------------------------

### **§5.1 LaTEX**

LaTeX  — наиболее популярный набор макрорасширений (или макропакет) системы
компьютерной вёрстки [TeX][1], который облегчает набор сложных документов.

[1]: <http://ru.wikipedia.org/wiki/TeX>

TeX  — система компьютерной вёрстки, разработанная американским
профессором информатики Дональдом Кнутом в целях создания компьютерной
типографии. В неё входят средства для секционирования документов, для работы
с перекрёстными ссылками. Многие считают TeX лучшим способом для набора сложных
математических формул. В частности, благодаря этим возможностям, TeX популярен в
академических кругах, особенно среди математиков и физиков.

LATEX как издательская система предоставляет удобные и гибкие средства достичь
этого полиграфического качества. В частности, указав с помощью простых средств
логическую структуру текста, автор может не вникать в детали оформления, причем
эти детали при необходимости нетрудно изменить (чтобы, скажем, сменить шрифт,
которым печатаются заголовки, не надо шарить по всему тексту, а достаточно
заменить одну строчку в так называемом «стилевом файле»).

Программа TEX (и все издательские системы на ее базе) неприхотлива к технике.

Возможности системы, в принципе, не ограничены (из-за механизма программирования
новых макросов). Вот список некоторых возможностей, предлагаемых стандартными
макросами:

-   алгоритмы расстановки переносов, определения междусловных пробелов,
    балансировки текста в абзацах;

-   автоматическая генерация содержания, списка иллюстраций, таблиц и так далее;

-   механизм работы с перекрёстными ссылками на формулы, таблицы, иллюстрации,
    их номер или страницу;

-   механизм цитирования библиографических источников, работы с
    библиографическими картотеками;

-   размещение иллюстраций (иллюстрации, таблицы и подписи к ним автоматически
    размещаются на странице и нумеруются);

-   оформление математических формул, возможность набирать многострочные
    формулы, большой выбор математических символов;

-   оформление химических формул и структурных схем
    молекул органической и неорганической химии;

-   оформление графов, схем, диаграмм, синтаксических графов;

-   оформление алгоритмов, исходных текстов программ (которые могут включаться в
    текст непосредственно из своих файлов) с синтаксической подсветкой;

-   разбивка документа на отдельные части (тематические карты).

Огромным достоинством систем на базе TEX’а является высокое качество и гибкость
верстки абзацев и математических формул. Благодаря этому обстоятельству TEX стал
очень популярен как язык международного обмена статьями по математике и физике.

Есть у TEX’а и недостатки. Тем, кто привык к редакторам наподобие Word’а, может
не понравиться, что TEX не является системой типа WYSIWYG: работа с исходным
текстом и просмотр того, как текст будет выглядеть на печати, — разные операции.
На взгляд автора, благодаря этой особенности время на подготовку текста
типографского качества только сокращается, но представления об удобстве у всех
разные.

Далее, хотя параметры оформления менять легко, создать принципиально новое
оформление (новый .класс документов.) — совсем не простое дело.

Переносимость TEX’овских текстов снижается, если в них предусмотрен импорт
графических файлов (эта возможность в TEX’е зависит от его реализации). Впрочем,
в последнее время в этом отношении наметился определенный прогресс: стандартом
de facto в TEX’овском мире становится представление графики в формате
PostScript, причем в LATEX’e появились удобные средства для включения этой
графики в текст.

Наконец, TEX плохо приспособлен для верстки страниц со сложным взаимодействием
текста и графики.

Практическое применение Git’a и LaTEX’а в командных разработках:

две дюжины математиков написали 600-страничную книгу меньше, чем за полгода,
используя исходные файлы LaTEX и систему Git. В данном случае репозиторий явился
не только архивом для файлом, но и центральной сетью для планирования и
дискуссий последующих действий.

### **§5.2 Markdown**

Markdown — облегчённый язык разметки. Первоначально создан в 2004 году [Джоном
Грубером][2]([англ.][3] [John Gruber][4]) и [Аароном Шварцем][5], целью которых
являлось создание максимально удобного для чтения и публикации облегчённого
языка разметки. Многие идеи языка были позаимствованы из существующих соглашений
по разметке [текста][6] в [электронных письмах][7]. Реализации языка Markdown
преобразуют текст в формате Markdown в [валидный][8], [правильно
построенный][9] [XHTML][10] и заменяют левые угловые скобки («\<»)
и [амперсанды][11] («&») на соответствующие коды сущностей. Первой реализацией
Markdown стала написанная Грубером реализация на [Perl][12], однако спустя
некоторое время появилось множество реализаций от сторонних разработчиков
(см. [ниже][13]). Реализация на Perl распространяется по лицензии
типа [BSD][14]. Реализации Markdown на различных языках
программирования включены (или доступны в качестве [плагина][15]) во
многие системы управления содержимым.

[2]: <http://ru.wikipedia.org/w/index.php?title=%D0%94%D0%B6%D0%BE%D0%BD_%D0%93%D1%80%D1%83%D0%B1%D0%B5%D1%80&action=edit&redlink=1>

[3]: <http://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA>

[4]: <http://en.wikipedia.org/wiki/John_Gruber>

[5]: <http://ru.wikipedia.org/wiki/%D0%A8%D0%B2%D0%B0%D1%80%D1%86,_%D0%90%D0%B0%D1%80%D0%BE%D0%BD>

[6]: <http://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BA%D1%81%D1%82%D0%BE%D0%B2%D1%8B%D0%B5_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%B5>

[7]: <http://ru.wikipedia.org/wiki/%D0%AD%D0%BB%D0%B5%D0%BA%D1%82%D1%80%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D0%BF%D0%BE%D1%87%D1%82%D0%B0>

[8]: <http://ru.wikipedia.org/wiki/%D0%92%D0%B0%D0%BB%D0%B8%D0%B4%D0%B0%D1%82%D0%BE%D1%80_%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B0>

[9]: <http://ru.wikipedia.org/wiki/XML#.D0.9F.D1.80.D0.B0.D0.B2.D0.B8.D0.BB.D1.8C.D0.BD.D0.BE_.D0.BF.D0.BE.D1.81.D1.82.D1.80.D0.BE.D0.B5.D0.BD.D0.BD.D1.8B.D0.B5_.D0.B8_.D0.B4.D0.B5.D0.B9.D1.81.D1.82.D0.B2.D0.B8.D1.82.D0.B5.D0.BB.D1.8C.D0.BD.D1.8B.D0.B5_.D0.B4.D0.BE.D0.BA.D1.83.D0.BC.D0.B5.D0.B>

[10]: <http://ru.wikipedia.org/wiki/XHTML>

[11]: <http://ru.wikipedia.org/wiki/%D0%90%D0%BC%D0%BF%D0%B5%D1%80%D1%81%D0%B0%D0%BD%D0%B4>

[12]: <http://ru.wikipedia.org/wiki/Perl>

[13]: <http://ru.wikipedia.org/wiki/Markdown#.D0.A0.D0.B5.D0.B0.D0.BB.D0.B8.D0.B7.D0.B0.D1.86.D0.B8.D0.B8_Markdown>

[14]: <http://ru.wikipedia.org/wiki/BSD>

[15]: <http://ru.wikipedia.org/wiki/%D0%9F%D0%BB%D0%B0%D0%B3%D0%B8%D0%BD>

Идея Markdown состоит в том, чтобы создать легкость не только при написании и
редактировании текста, но и даже при его чтении. В этом синтаксисе символы для
форматирования текста тщательно подобраны и потому понятно и при чтении, что они
означают: где заголовок, где выделение текста, где ссылки и списки.

Таким образом, Маркдаун стремится быть изящным и простым, в то время как другие
многообразные варианты текстовой разметки пытаются передать как можно большую их
функциональность. Синтаксис Markdown минимально отличается от простого текста,
поэтому эта программа более широко известна в кругах обычных пользователей, чем
LaTEX.

Практическое применение Git’a и Markdown’а в командных разработках:

создание студентами методического пособия «Командная разработка веб-приложений»

**Заключение**
--------------

На основании проделанной работы можно утверждать, что Google Docs удобен для
обычного пользователя: удобный и понятный интерфейс, работа в знакомой системе
типа WYSIWYG, поддержка различных типов файлов. Если работа не включает в себя
больших математических или любых других формул, не требует сложной вёрстки,
долгого времени хранения информации и участия большого количества человек, то
она вполне удобна и приемлима для работы.

Git же разработан для больших проектных команд. Он более приспособлен и удобен,
чем Google Docs, так как благодаря системе контроля версий сохраняются все
изменения работы и есть возможность возврата на любой момент создания проекта.
Помимо этого возможность потери данных минимальна, работа без доступа к
локальной сети удобнее. Проблема Git’а с работой в документах MS Word пока не
решаема, но есть альтернативный вариант: Git в совокупности с системами
текстовых разметок (в частности с Markdown’ом и LaTEX’ом). Удобство в данном
случае заключается в том, что можно не беспокоиться о том, как ваш файл
откроется на другом компьютере, вёрстка и синтаксис полностью сохраняется, что
позволяет сразу по окончанию работы, отправлять документ на печать.

Сложности, которые могут встретиться при работе с данной системой это хранение
дизайнерских файлов (psd, corel draw и прочее) и существует большая
необходимость в создании инструмента, для устранения этой проблемы.

**Использованная литература**
-----------------------------

1.  Scott Chacon. «Pro Git», 2009;

2.  Arturo Herrero. «Instant Markdown», / published by Packt Publishing Ltd.,
    august 2013;

3.  Ben Lynn. «Git Magic», 2010;

4.  Балдин Е.М. «Компьютерная типография LaTEX», / издательство «БХВ-Петербург»,
    2008;

5.  Леонов В.М. «Google Docs, Windows Live и другие облачные технологии», / ООО
    «Издательство «Эксмо», 2012;

6.  Львовский С.М. «Набор и вёрстка в системе LaTEX». / 3-е издание,
    исправленное и дополненное, 2003;

**Использованные источники**
----------------------------

1.  Википедия. URL: http://ru.wikipedia.org/wiki/Git ;

2.  Википедия. URL: <http://ru.wikipedia.org/wiki/Google_Docs>;

3.  Википедия. URL: http://ru.wikipedia.org/wiki/Markdown;

4.  Хабрахабр. URL: <http://habrahabr.ru/post/24534/>;

5.  GitHub. URL: <https://github.com/justinvh/Markdown-LaTeX>;

6.  Git. URL: <http://git-scm.com/book/ru/Основы-Git>;

7.  Большая советская энциклопедия. URL: http://www.enci.ru/LATEX.
